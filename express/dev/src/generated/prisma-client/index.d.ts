// Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  answer: (where?: AnswerWhereInput) => Promise<boolean>;
  campaign: (where?: CampaignWhereInput) => Promise<boolean>;
  decision: (where?: DecisionWhereInput) => Promise<boolean>;
  link: (where?: LinkWhereInput) => Promise<boolean>;
  question: (where?: QuestionWhereInput) => Promise<boolean>;
  script: (where?: ScriptWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  answer: (where: AnswerWhereUniqueInput) => AnswerPromise;
  answers: (
    args?: {
      where?: AnswerWhereInput;
      orderBy?: AnswerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Answer>;
  answersConnection: (
    args?: {
      where?: AnswerWhereInput;
      orderBy?: AnswerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AnswerConnectionPromise;
  campaign: (where: CampaignWhereUniqueInput) => CampaignPromise;
  campaigns: (
    args?: {
      where?: CampaignWhereInput;
      orderBy?: CampaignOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Campaign>;
  campaignsConnection: (
    args?: {
      where?: CampaignWhereInput;
      orderBy?: CampaignOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CampaignConnectionPromise;
  decision: (where: DecisionWhereUniqueInput) => DecisionPromise;
  decisions: (
    args?: {
      where?: DecisionWhereInput;
      orderBy?: DecisionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Decision>;
  decisionsConnection: (
    args?: {
      where?: DecisionWhereInput;
      orderBy?: DecisionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DecisionConnectionPromise;
  link: (where: LinkWhereUniqueInput) => LinkPromise;
  links: (
    args?: {
      where?: LinkWhereInput;
      orderBy?: LinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Link>;
  linksConnection: (
    args?: {
      where?: LinkWhereInput;
      orderBy?: LinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LinkConnectionPromise;
  question: (where: QuestionWhereUniqueInput) => QuestionPromise;
  questions: (
    args?: {
      where?: QuestionWhereInput;
      orderBy?: QuestionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Question>;
  questionsConnection: (
    args?: {
      where?: QuestionWhereInput;
      orderBy?: QuestionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => QuestionConnectionPromise;
  script: (where: ScriptWhereUniqueInput) => ScriptPromise;
  scripts: (
    args?: {
      where?: ScriptWhereInput;
      orderBy?: ScriptOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Script>;
  scriptsConnection: (
    args?: {
      where?: ScriptWhereInput;
      orderBy?: ScriptOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ScriptConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAnswer: (data: AnswerCreateInput) => AnswerPromise;
  updateAnswer: (
    args: { data: AnswerUpdateInput; where: AnswerWhereUniqueInput }
  ) => AnswerPromise;
  updateManyAnswers: (
    args: { data: AnswerUpdateManyMutationInput; where?: AnswerWhereInput }
  ) => BatchPayloadPromise;
  upsertAnswer: (
    args: {
      where: AnswerWhereUniqueInput;
      create: AnswerCreateInput;
      update: AnswerUpdateInput;
    }
  ) => AnswerPromise;
  deleteAnswer: (where: AnswerWhereUniqueInput) => AnswerPromise;
  deleteManyAnswers: (where?: AnswerWhereInput) => BatchPayloadPromise;
  createCampaign: (data: CampaignCreateInput) => CampaignPromise;
  updateCampaign: (
    args: { data: CampaignUpdateInput; where: CampaignWhereUniqueInput }
  ) => CampaignPromise;
  updateManyCampaigns: (
    args: { data: CampaignUpdateManyMutationInput; where?: CampaignWhereInput }
  ) => BatchPayloadPromise;
  upsertCampaign: (
    args: {
      where: CampaignWhereUniqueInput;
      create: CampaignCreateInput;
      update: CampaignUpdateInput;
    }
  ) => CampaignPromise;
  deleteCampaign: (where: CampaignWhereUniqueInput) => CampaignPromise;
  deleteManyCampaigns: (where?: CampaignWhereInput) => BatchPayloadPromise;
  createDecision: (data: DecisionCreateInput) => DecisionPromise;
  updateDecision: (
    args: { data: DecisionUpdateInput; where: DecisionWhereUniqueInput }
  ) => DecisionPromise;
  updateManyDecisions: (
    args: { data: DecisionUpdateManyMutationInput; where?: DecisionWhereInput }
  ) => BatchPayloadPromise;
  upsertDecision: (
    args: {
      where: DecisionWhereUniqueInput;
      create: DecisionCreateInput;
      update: DecisionUpdateInput;
    }
  ) => DecisionPromise;
  deleteDecision: (where: DecisionWhereUniqueInput) => DecisionPromise;
  deleteManyDecisions: (where?: DecisionWhereInput) => BatchPayloadPromise;
  createLink: (data: LinkCreateInput) => LinkPromise;
  updateLink: (
    args: { data: LinkUpdateInput; where: LinkWhereUniqueInput }
  ) => LinkPromise;
  updateManyLinks: (
    args: { data: LinkUpdateManyMutationInput; where?: LinkWhereInput }
  ) => BatchPayloadPromise;
  upsertLink: (
    args: {
      where: LinkWhereUniqueInput;
      create: LinkCreateInput;
      update: LinkUpdateInput;
    }
  ) => LinkPromise;
  deleteLink: (where: LinkWhereUniqueInput) => LinkPromise;
  deleteManyLinks: (where?: LinkWhereInput) => BatchPayloadPromise;
  createQuestion: (data: QuestionCreateInput) => QuestionPromise;
  updateQuestion: (
    args: { data: QuestionUpdateInput; where: QuestionWhereUniqueInput }
  ) => QuestionPromise;
  updateManyQuestions: (
    args: { data: QuestionUpdateManyMutationInput; where?: QuestionWhereInput }
  ) => BatchPayloadPromise;
  upsertQuestion: (
    args: {
      where: QuestionWhereUniqueInput;
      create: QuestionCreateInput;
      update: QuestionUpdateInput;
    }
  ) => QuestionPromise;
  deleteQuestion: (where: QuestionWhereUniqueInput) => QuestionPromise;
  deleteManyQuestions: (where?: QuestionWhereInput) => BatchPayloadPromise;
  createScript: (data: ScriptCreateInput) => ScriptPromise;
  updateScript: (
    args: { data: ScriptUpdateInput; where: ScriptWhereUniqueInput }
  ) => ScriptPromise;
  upsertScript: (
    args: {
      where: ScriptWhereUniqueInput;
      create: ScriptCreateInput;
      update: ScriptUpdateInput;
    }
  ) => ScriptPromise;
  deleteScript: (where: ScriptWhereUniqueInput) => ScriptPromise;
  deleteManyScripts: (where?: ScriptWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  answer: (
    where?: AnswerSubscriptionWhereInput
  ) => AnswerSubscriptionPayloadSubscription;
  campaign: (
    where?: CampaignSubscriptionWhereInput
  ) => CampaignSubscriptionPayloadSubscription;
  decision: (
    where?: DecisionSubscriptionWhereInput
  ) => DecisionSubscriptionPayloadSubscription;
  link: (
    where?: LinkSubscriptionWhereInput
  ) => LinkSubscriptionPayloadSubscription;
  question: (
    where?: QuestionSubscriptionWhereInput
  ) => QuestionSubscriptionPayloadSubscription;
  script: (
    where?: ScriptSubscriptionWhereInput
  ) => ScriptSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type DecisionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "level_ASC"
  | "level_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CampaignOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "code_ASC"
  | "code_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AnswerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "description_ASC"
  | "description_DESC"
  | "url_ASC"
  | "url_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type QuestionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ScriptOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface DecisionUpdateWithWhereUniqueWithoutScriptInput {
  where: DecisionWhereUniqueInput;
  data: DecisionUpdateWithoutScriptDataInput;
}

export type AnswerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface QuestionUpdateWithoutAnswersDataInput {
  value?: String;
}

export interface CampaignUpdateWithoutScriptDataInput {
  name?: String;
  code?: String;
}

export interface QuestionUpsertWithoutAnswersInput {
  update: QuestionUpdateWithoutAnswersDataInput;
  create: QuestionCreateWithoutAnswersInput;
}

export interface AnswerUpdateWithWhereUniqueWithoutQuestionInput {
  where: AnswerWhereUniqueInput;
  data: AnswerUpdateWithoutQuestionDataInput;
}

export interface AnswerUpdateManyMutationInput {
  value?: String;
}

export interface ScriptSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ScriptWhereInput;
  AND?: ScriptSubscriptionWhereInput[] | ScriptSubscriptionWhereInput;
  OR?: ScriptSubscriptionWhereInput[] | ScriptSubscriptionWhereInput;
  NOT?: ScriptSubscriptionWhereInput[] | ScriptSubscriptionWhereInput;
}

export interface LinkCreateInput {
  description: String;
  url: String;
  postedBy: UserCreateOneWithoutLinksInput;
}

export interface QuestionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: QuestionWhereInput;
  AND?: QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput;
  OR?: QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput;
  NOT?: QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput;
}

export interface DecisionUpdateManyMutationInput {
  level?: Int;
}

export interface DecisionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  script?: ScriptWhereInput;
  question?: QuestionWhereInput;
  level?: Int;
  level_not?: Int;
  level_in?: Int[] | Int;
  level_not_in?: Int[] | Int;
  level_lt?: Int;
  level_lte?: Int;
  level_gt?: Int;
  level_gte?: Int;
  fromAnswer?: AnswerWhereInput;
  AND?: DecisionWhereInput[] | DecisionWhereInput;
  OR?: DecisionWhereInput[] | DecisionWhereInput;
  NOT?: DecisionWhereInput[] | DecisionWhereInput;
}

export interface CampaignCreateInput {
  name: String;
  code: String;
  script?: ScriptCreateOneWithoutCampaignInput;
}

export interface CampaignWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  code?: String;
  code_not?: String;
  code_in?: String[] | String;
  code_not_in?: String[] | String;
  code_lt?: String;
  code_lte?: String;
  code_gt?: String;
  code_gte?: String;
  code_contains?: String;
  code_not_contains?: String;
  code_starts_with?: String;
  code_not_starts_with?: String;
  code_ends_with?: String;
  code_not_ends_with?: String;
  script?: ScriptWhereInput;
  AND?: CampaignWhereInput[] | CampaignWhereInput;
  OR?: CampaignWhereInput[] | CampaignWhereInput;
  NOT?: CampaignWhereInput[] | CampaignWhereInput;
}

export interface ScriptCreateOneWithoutCampaignInput {
  create?: ScriptCreateWithoutCampaignInput;
  connect?: ScriptWhereUniqueInput;
}

export interface CampaignSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CampaignWhereInput;
  AND?: CampaignSubscriptionWhereInput[] | CampaignSubscriptionWhereInput;
  OR?: CampaignSubscriptionWhereInput[] | CampaignSubscriptionWhereInput;
  NOT?: CampaignSubscriptionWhereInput[] | CampaignSubscriptionWhereInput;
}

export interface ScriptCreateWithoutCampaignInput {
  story?: DecisionCreateManyWithoutScriptInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
  password?: String;
}

export interface DecisionCreateManyWithoutScriptInput {
  create?:
    | DecisionCreateWithoutScriptInput[]
    | DecisionCreateWithoutScriptInput;
  connect?: DecisionWhereUniqueInput[] | DecisionWhereUniqueInput;
}

export interface LinkUpdateManyWithWhereNestedInput {
  where: LinkScalarWhereInput;
  data: LinkUpdateManyDataInput;
}

export interface DecisionCreateWithoutScriptInput {
  question: QuestionCreateOneInput;
  level: Int;
  fromAnswer?: AnswerCreateOneInput;
}

export interface LinkScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: LinkScalarWhereInput[] | LinkScalarWhereInput;
  OR?: LinkScalarWhereInput[] | LinkScalarWhereInput;
  NOT?: LinkScalarWhereInput[] | LinkScalarWhereInput;
}

export interface QuestionCreateOneInput {
  create?: QuestionCreateInput;
  connect?: QuestionWhereUniqueInput;
}

export interface LinkUpdateWithoutPostedByDataInput {
  description?: String;
  url?: String;
}

export interface QuestionCreateInput {
  value: String;
  answers?: AnswerCreateManyWithoutQuestionInput;
}

export interface LinkUpdateWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput;
  data: LinkUpdateWithoutPostedByDataInput;
}

export interface AnswerCreateManyWithoutQuestionInput {
  create?:
    | AnswerCreateWithoutQuestionInput[]
    | AnswerCreateWithoutQuestionInput;
  connect?: AnswerWhereUniqueInput[] | AnswerWhereUniqueInput;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  password?: String;
  links?: LinkUpdateManyWithoutPostedByInput;
}

export interface AnswerCreateWithoutQuestionInput {
  value: String;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  links_every?: LinkWhereInput;
  links_some?: LinkWhereInput;
  links_none?: LinkWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface AnswerCreateOneInput {
  create?: AnswerCreateInput;
  connect?: AnswerWhereUniqueInput;
}

export interface LinkCreateWithoutPostedByInput {
  description: String;
  url: String;
}

export interface CampaignUpdateInput {
  name?: String;
  code?: String;
  script?: ScriptUpdateOneWithoutCampaignInput;
}

export interface UserCreateInput {
  name: String;
  email: String;
  password: String;
  links?: LinkCreateManyWithoutPostedByInput;
}

export interface ScriptUpdateOneWithoutCampaignInput {
  create?: ScriptCreateWithoutCampaignInput;
  update?: ScriptUpdateWithoutCampaignDataInput;
  upsert?: ScriptUpsertWithoutCampaignInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ScriptWhereUniqueInput;
}

export interface AnswerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  question?: QuestionWhereInput;
  AND?: AnswerWhereInput[] | AnswerWhereInput;
  OR?: AnswerWhereInput[] | AnswerWhereInput;
  NOT?: AnswerWhereInput[] | AnswerWhereInput;
}

export interface ScriptUpdateWithoutCampaignDataInput {
  story?: DecisionUpdateManyWithoutScriptInput;
}

export interface ScriptCreateInput {
  campaign: CampaignCreateOneWithoutScriptInput;
  story?: DecisionCreateManyWithoutScriptInput;
}

export interface DecisionUpdateManyWithoutScriptInput {
  create?:
    | DecisionCreateWithoutScriptInput[]
    | DecisionCreateWithoutScriptInput;
  delete?: DecisionWhereUniqueInput[] | DecisionWhereUniqueInput;
  connect?: DecisionWhereUniqueInput[] | DecisionWhereUniqueInput;
  set?: DecisionWhereUniqueInput[] | DecisionWhereUniqueInput;
  disconnect?: DecisionWhereUniqueInput[] | DecisionWhereUniqueInput;
  update?:
    | DecisionUpdateWithWhereUniqueWithoutScriptInput[]
    | DecisionUpdateWithWhereUniqueWithoutScriptInput;
  upsert?:
    | DecisionUpsertWithWhereUniqueWithoutScriptInput[]
    | DecisionUpsertWithWhereUniqueWithoutScriptInput;
  deleteMany?: DecisionScalarWhereInput[] | DecisionScalarWhereInput;
  updateMany?:
    | DecisionUpdateManyWithWhereNestedInput[]
    | DecisionUpdateManyWithWhereNestedInput;
}

export type ScriptWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ScriptUpsertWithoutStoryInput {
  update: ScriptUpdateWithoutStoryDataInput;
  create: ScriptCreateWithoutStoryInput;
}

export interface LinkUpdateManyMutationInput {
  description?: String;
  url?: String;
}

export interface DecisionUpdateWithoutScriptDataInput {
  question?: QuestionUpdateOneRequiredInput;
  level?: Int;
  fromAnswer?: AnswerUpdateOneInput;
}

export interface UserUpdateWithoutLinksDataInput {
  name?: String;
  email?: String;
  password?: String;
}

export interface QuestionUpdateOneRequiredInput {
  create?: QuestionCreateInput;
  update?: QuestionUpdateDataInput;
  upsert?: QuestionUpsertNestedInput;
  connect?: QuestionWhereUniqueInput;
}

export interface UserUpdateOneRequiredWithoutLinksInput {
  create?: UserCreateWithoutLinksInput;
  update?: UserUpdateWithoutLinksDataInput;
  upsert?: UserUpsertWithoutLinksInput;
  connect?: UserWhereUniqueInput;
}

export interface QuestionUpdateDataInput {
  value?: String;
  answers?: AnswerUpdateManyWithoutQuestionInput;
}

export interface UserCreateWithoutLinksInput {
  name: String;
  email: String;
  password: String;
}

export interface AnswerUpdateManyWithoutQuestionInput {
  create?:
    | AnswerCreateWithoutQuestionInput[]
    | AnswerCreateWithoutQuestionInput;
  delete?: AnswerWhereUniqueInput[] | AnswerWhereUniqueInput;
  connect?: AnswerWhereUniqueInput[] | AnswerWhereUniqueInput;
  set?: AnswerWhereUniqueInput[] | AnswerWhereUniqueInput;
  disconnect?: AnswerWhereUniqueInput[] | AnswerWhereUniqueInput;
  update?:
    | AnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    | AnswerUpdateWithWhereUniqueWithoutQuestionInput;
  upsert?:
    | AnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    | AnswerUpsertWithWhereUniqueWithoutQuestionInput;
  deleteMany?: AnswerScalarWhereInput[] | AnswerScalarWhereInput;
  updateMany?:
    | AnswerUpdateManyWithWhereNestedInput[]
    | AnswerUpdateManyWithWhereNestedInput;
}

export interface QuestionCreateOneWithoutAnswersInput {
  create?: QuestionCreateWithoutAnswersInput;
  connect?: QuestionWhereUniqueInput;
}

export interface CampaignUpsertWithoutScriptInput {
  update: CampaignUpdateWithoutScriptDataInput;
  create: CampaignCreateWithoutScriptInput;
}

export interface AnswerUpdateInput {
  value?: String;
  question?: QuestionUpdateOneRequiredWithoutAnswersInput;
}

export interface AnswerUpdateWithoutQuestionDataInput {
  value?: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface AnswerUpsertWithWhereUniqueWithoutQuestionInput {
  where: AnswerWhereUniqueInput;
  update: AnswerUpdateWithoutQuestionDataInput;
  create: AnswerCreateWithoutQuestionInput;
}

export interface LinkSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LinkWhereInput;
  AND?: LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput;
  OR?: LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput;
  NOT?: LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput;
}

export interface AnswerScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  AND?: AnswerScalarWhereInput[] | AnswerScalarWhereInput;
  OR?: AnswerScalarWhereInput[] | AnswerScalarWhereInput;
  NOT?: AnswerScalarWhereInput[] | AnswerScalarWhereInput;
}

export interface DecisionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DecisionWhereInput;
  AND?: DecisionSubscriptionWhereInput[] | DecisionSubscriptionWhereInput;
  OR?: DecisionSubscriptionWhereInput[] | DecisionSubscriptionWhereInput;
  NOT?: DecisionSubscriptionWhereInput[] | DecisionSubscriptionWhereInput;
}

export interface AnswerUpdateManyWithWhereNestedInput {
  where: AnswerScalarWhereInput;
  data: AnswerUpdateManyDataInput;
}

export interface LinkUpdateManyDataInput {
  description?: String;
  url?: String;
}

export interface AnswerUpdateManyDataInput {
  value?: String;
}

export interface LinkUpsertWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput;
  update: LinkUpdateWithoutPostedByDataInput;
  create: LinkCreateWithoutPostedByInput;
}

export interface QuestionUpsertNestedInput {
  update: QuestionUpdateDataInput;
  create: QuestionCreateInput;
}

export interface LinkUpdateManyWithoutPostedByInput {
  create?: LinkCreateWithoutPostedByInput[] | LinkCreateWithoutPostedByInput;
  delete?: LinkWhereUniqueInput[] | LinkWhereUniqueInput;
  connect?: LinkWhereUniqueInput[] | LinkWhereUniqueInput;
  set?: LinkWhereUniqueInput[] | LinkWhereUniqueInput;
  disconnect?: LinkWhereUniqueInput[] | LinkWhereUniqueInput;
  update?:
    | LinkUpdateWithWhereUniqueWithoutPostedByInput[]
    | LinkUpdateWithWhereUniqueWithoutPostedByInput;
  upsert?:
    | LinkUpsertWithWhereUniqueWithoutPostedByInput[]
    | LinkUpsertWithWhereUniqueWithoutPostedByInput;
  deleteMany?: LinkScalarWhereInput[] | LinkScalarWhereInput;
  updateMany?:
    | LinkUpdateManyWithWhereNestedInput[]
    | LinkUpdateManyWithWhereNestedInput;
}

export interface AnswerUpdateOneInput {
  create?: AnswerCreateInput;
  update?: AnswerUpdateDataInput;
  upsert?: AnswerUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: AnswerWhereUniqueInput;
}

export interface QuestionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  answers_every?: AnswerWhereInput;
  answers_some?: AnswerWhereInput;
  answers_none?: AnswerWhereInput;
  AND?: QuestionWhereInput[] | QuestionWhereInput;
  OR?: QuestionWhereInput[] | QuestionWhereInput;
  NOT?: QuestionWhereInput[] | QuestionWhereInput;
}

export interface AnswerUpdateDataInput {
  value?: String;
  question?: QuestionUpdateOneRequiredWithoutAnswersInput;
}

export type QuestionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface AnswerUpsertNestedInput {
  update: AnswerUpdateDataInput;
  create: AnswerCreateInput;
}

export interface QuestionUpdateManyMutationInput {
  value?: String;
}

export interface DecisionUpsertWithWhereUniqueWithoutScriptInput {
  where: DecisionWhereUniqueInput;
  update: DecisionUpdateWithoutScriptDataInput;
  create: DecisionCreateWithoutScriptInput;
}

export interface UserUpsertWithoutLinksInput {
  update: UserUpdateWithoutLinksDataInput;
  create: UserCreateWithoutLinksInput;
}

export interface DecisionScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  level?: Int;
  level_not?: Int;
  level_in?: Int[] | Int;
  level_not_in?: Int[] | Int;
  level_lt?: Int;
  level_lte?: Int;
  level_gt?: Int;
  level_gte?: Int;
  AND?: DecisionScalarWhereInput[] | DecisionScalarWhereInput;
  OR?: DecisionScalarWhereInput[] | DecisionScalarWhereInput;
  NOT?: DecisionScalarWhereInput[] | DecisionScalarWhereInput;
}

export interface LinkUpdateInput {
  description?: String;
  url?: String;
  postedBy?: UserUpdateOneRequiredWithoutLinksInput;
}

export interface DecisionUpdateManyWithWhereNestedInput {
  where: DecisionScalarWhereInput;
  data: DecisionUpdateManyDataInput;
}

export interface AnswerCreateInput {
  value: String;
  question: QuestionCreateOneWithoutAnswersInput;
}

export interface DecisionUpdateManyDataInput {
  level?: Int;
}

export interface QuestionUpdateOneRequiredWithoutAnswersInput {
  create?: QuestionCreateWithoutAnswersInput;
  update?: QuestionUpdateWithoutAnswersDataInput;
  upsert?: QuestionUpsertWithoutAnswersInput;
  connect?: QuestionWhereUniqueInput;
}

export interface ScriptUpsertWithoutCampaignInput {
  update: ScriptUpdateWithoutCampaignDataInput;
  create: ScriptCreateWithoutCampaignInput;
}

export interface ScriptWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  campaign?: CampaignWhereInput;
  story_every?: DecisionWhereInput;
  story_some?: DecisionWhereInput;
  story_none?: DecisionWhereInput;
  AND?: ScriptWhereInput[] | ScriptWhereInput;
  OR?: ScriptWhereInput[] | ScriptWhereInput;
  NOT?: ScriptWhereInput[] | ScriptWhereInput;
}

export interface CampaignUpdateManyMutationInput {
  name?: String;
  code?: String;
}

export type DecisionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface DecisionCreateInput {
  script: ScriptCreateOneWithoutStoryInput;
  question: QuestionCreateOneInput;
  level: Int;
  fromAnswer?: AnswerCreateOneInput;
}

export interface LinkWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  postedBy?: UserWhereInput;
  AND?: LinkWhereInput[] | LinkWhereInput;
  OR?: LinkWhereInput[] | LinkWhereInput;
  NOT?: LinkWhereInput[] | LinkWhereInput;
}

export interface ScriptCreateOneWithoutStoryInput {
  create?: ScriptCreateWithoutStoryInput;
  connect?: ScriptWhereUniqueInput;
}

export interface ScriptUpdateInput {
  campaign?: CampaignUpdateOneRequiredWithoutScriptInput;
  story?: DecisionUpdateManyWithoutScriptInput;
}

export interface ScriptCreateWithoutStoryInput {
  campaign: CampaignCreateOneWithoutScriptInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface CampaignCreateOneWithoutScriptInput {
  create?: CampaignCreateWithoutScriptInput;
  connect?: CampaignWhereUniqueInput;
}

export interface QuestionCreateWithoutAnswersInput {
  value: String;
}

export interface CampaignCreateWithoutScriptInput {
  name: String;
  code: String;
}

export interface AnswerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AnswerWhereInput;
  AND?: AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput;
  OR?: AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput;
  NOT?: AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput;
}

export interface CampaignUpdateOneRequiredWithoutScriptInput {
  create?: CampaignCreateWithoutScriptInput;
  update?: CampaignUpdateWithoutScriptDataInput;
  upsert?: CampaignUpsertWithoutScriptInput;
  connect?: CampaignWhereUniqueInput;
}

export interface ScriptUpdateWithoutStoryDataInput {
  campaign?: CampaignUpdateOneRequiredWithoutScriptInput;
}

export interface ScriptUpdateOneRequiredWithoutStoryInput {
  create?: ScriptCreateWithoutStoryInput;
  update?: ScriptUpdateWithoutStoryDataInput;
  upsert?: ScriptUpsertWithoutStoryInput;
  connect?: ScriptWhereUniqueInput;
}

export interface DecisionUpdateInput {
  script?: ScriptUpdateOneRequiredWithoutStoryInput;
  question?: QuestionUpdateOneRequiredInput;
  level?: Int;
  fromAnswer?: AnswerUpdateOneInput;
}

export type LinkWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type CampaignWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserCreateOneWithoutLinksInput {
  create?: UserCreateWithoutLinksInput;
  connect?: UserWhereUniqueInput;
}

export interface QuestionUpdateInput {
  value?: String;
  answers?: AnswerUpdateManyWithoutQuestionInput;
}

export interface LinkCreateManyWithoutPostedByInput {
  create?: LinkCreateWithoutPostedByInput[] | LinkCreateWithoutPostedByInput;
  connect?: LinkWhereUniqueInput[] | LinkWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCampaign {
  count: Int;
}

export interface AggregateCampaignPromise
  extends Promise<AggregateCampaign>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCampaignSubscription
  extends Promise<AsyncIterator<AggregateCampaign>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface DecisionConnection {
  pageInfo: PageInfo;
  edges: DecisionEdge[];
}

export interface DecisionConnectionPromise
  extends Promise<DecisionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DecisionEdge>>() => T;
  aggregate: <T = AggregateDecisionPromise>() => T;
}

export interface DecisionConnectionSubscription
  extends Promise<AsyncIterator<DecisionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DecisionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDecisionSubscription>() => T;
}

export interface AggregateAnswer {
  count: Int;
}

export interface AggregateAnswerPromise
  extends Promise<AggregateAnswer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAnswerSubscription
  extends Promise<AsyncIterator<AggregateAnswer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ScriptPreviousValues {
  id: ID_Output;
}

export interface ScriptPreviousValuesPromise
  extends Promise<ScriptPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface ScriptPreviousValuesSubscription
  extends Promise<AsyncIterator<ScriptPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface CampaignEdge {
  node: Campaign;
  cursor: String;
}

export interface CampaignEdgePromise
  extends Promise<CampaignEdge>,
    Fragmentable {
  node: <T = CampaignPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CampaignEdgeSubscription
  extends Promise<AsyncIterator<CampaignEdge>>,
    Fragmentable {
  node: <T = CampaignSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CampaignConnection {
  pageInfo: PageInfo;
  edges: CampaignEdge[];
}

export interface CampaignConnectionPromise
  extends Promise<CampaignConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CampaignEdge>>() => T;
  aggregate: <T = AggregateCampaignPromise>() => T;
}

export interface CampaignConnectionSubscription
  extends Promise<AsyncIterator<CampaignConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CampaignEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCampaignSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ScriptSubscriptionPayload {
  mutation: MutationType;
  node: Script;
  updatedFields: String[];
  previousValues: ScriptPreviousValues;
}

export interface ScriptSubscriptionPayloadPromise
  extends Promise<ScriptSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ScriptPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ScriptPreviousValuesPromise>() => T;
}

export interface ScriptSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ScriptSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ScriptSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ScriptPreviousValuesSubscription>() => T;
}

export interface ScriptEdge {
  node: Script;
  cursor: String;
}

export interface ScriptEdgePromise extends Promise<ScriptEdge>, Fragmentable {
  node: <T = ScriptPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ScriptEdgeSubscription
  extends Promise<AsyncIterator<ScriptEdge>>,
    Fragmentable {
  node: <T = ScriptSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Answer {
  id: ID_Output;
  value: String;
}

export interface AnswerPromise extends Promise<Answer>, Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
  question: <T = QuestionPromise>() => T;
}

export interface AnswerSubscription
  extends Promise<AsyncIterator<Answer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
  question: <T = QuestionSubscription>() => T;
}

export interface Question {
  id: ID_Output;
  value: String;
}

export interface QuestionPromise extends Promise<Question>, Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
  answers: <T = FragmentableArray<Answer>>(
    args?: {
      where?: AnswerWhereInput;
      orderBy?: AnswerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface QuestionSubscription
  extends Promise<AsyncIterator<Question>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
  answers: <T = Promise<AsyncIterator<AnswerSubscription>>>(
    args?: {
      where?: AnswerWhereInput;
      orderBy?: AnswerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AnswerSubscriptionPayload {
  mutation: MutationType;
  node: Answer;
  updatedFields: String[];
  previousValues: AnswerPreviousValues;
}

export interface AnswerSubscriptionPayloadPromise
  extends Promise<AnswerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AnswerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AnswerPreviousValuesPromise>() => T;
}

export interface AnswerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AnswerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AnswerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AnswerPreviousValuesSubscription>() => T;
}

export interface QuestionEdge {
  node: Question;
  cursor: String;
}

export interface QuestionEdgePromise
  extends Promise<QuestionEdge>,
    Fragmentable {
  node: <T = QuestionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface QuestionEdgeSubscription
  extends Promise<AsyncIterator<QuestionEdge>>,
    Fragmentable {
  node: <T = QuestionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AnswerPreviousValues {
  id: ID_Output;
  value: String;
}

export interface AnswerPreviousValuesPromise
  extends Promise<AnswerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
}

export interface AnswerPreviousValuesSubscription
  extends Promise<AsyncIterator<AnswerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLink {
  count: Int;
}

export interface AggregateLinkPromise
  extends Promise<AggregateLink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLinkSubscription
  extends Promise<AsyncIterator<AggregateLink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Decision {
  id: ID_Output;
  level: Int;
}

export interface DecisionPromise extends Promise<Decision>, Fragmentable {
  id: () => Promise<ID_Output>;
  script: <T = ScriptPromise>() => T;
  question: <T = QuestionPromise>() => T;
  level: () => Promise<Int>;
  fromAnswer: <T = AnswerPromise>() => T;
}

export interface DecisionSubscription
  extends Promise<AsyncIterator<Decision>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  script: <T = ScriptSubscription>() => T;
  question: <T = QuestionSubscription>() => T;
  level: () => Promise<AsyncIterator<Int>>;
  fromAnswer: <T = AnswerSubscription>() => T;
}

export interface LinkConnection {
  pageInfo: PageInfo;
  edges: LinkEdge[];
}

export interface LinkConnectionPromise
  extends Promise<LinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LinkEdge>>() => T;
  aggregate: <T = AggregateLinkPromise>() => T;
}

export interface LinkConnectionSubscription
  extends Promise<AsyncIterator<LinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LinkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLinkSubscription>() => T;
}

export interface CampaignSubscriptionPayload {
  mutation: MutationType;
  node: Campaign;
  updatedFields: String[];
  previousValues: CampaignPreviousValues;
}

export interface CampaignSubscriptionPayloadPromise
  extends Promise<CampaignSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CampaignPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CampaignPreviousValuesPromise>() => T;
}

export interface CampaignSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CampaignSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CampaignSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CampaignPreviousValuesSubscription>() => T;
}

export interface AnswerEdge {
  node: Answer;
  cursor: String;
}

export interface AnswerEdgePromise extends Promise<AnswerEdge>, Fragmentable {
  node: <T = AnswerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AnswerEdgeSubscription
  extends Promise<AsyncIterator<AnswerEdge>>,
    Fragmentable {
  node: <T = AnswerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CampaignPreviousValues {
  id: ID_Output;
  name: String;
  code: String;
}

export interface CampaignPreviousValuesPromise
  extends Promise<CampaignPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  code: () => Promise<String>;
}

export interface CampaignPreviousValuesSubscription
  extends Promise<AsyncIterator<CampaignPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDecision {
  count: Int;
}

export interface AggregateDecisionPromise
  extends Promise<AggregateDecision>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDecisionSubscription
  extends Promise<AsyncIterator<AggregateDecision>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AnswerConnection {
  pageInfo: PageInfo;
  edges: AnswerEdge[];
}

export interface AnswerConnectionPromise
  extends Promise<AnswerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AnswerEdge>>() => T;
  aggregate: <T = AggregateAnswerPromise>() => T;
}

export interface AnswerConnectionSubscription
  extends Promise<AsyncIterator<AnswerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AnswerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAnswerSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DecisionSubscriptionPayload {
  mutation: MutationType;
  node: Decision;
  updatedFields: String[];
  previousValues: DecisionPreviousValues;
}

export interface DecisionSubscriptionPayloadPromise
  extends Promise<DecisionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DecisionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DecisionPreviousValuesPromise>() => T;
}

export interface DecisionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DecisionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DecisionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DecisionPreviousValuesSubscription>() => T;
}

export interface AggregateScript {
  count: Int;
}

export interface AggregateScriptPromise
  extends Promise<AggregateScript>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateScriptSubscription
  extends Promise<AsyncIterator<AggregateScript>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DecisionPreviousValues {
  id: ID_Output;
  level: Int;
}

export interface DecisionPreviousValuesPromise
  extends Promise<DecisionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  level: () => Promise<Int>;
}

export interface DecisionPreviousValuesSubscription
  extends Promise<AsyncIterator<DecisionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  level: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateQuestion {
  count: Int;
}

export interface AggregateQuestionPromise
  extends Promise<AggregateQuestion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuestionSubscription
  extends Promise<AsyncIterator<AggregateQuestion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Script {
  id: ID_Output;
}

export interface ScriptPromise extends Promise<Script>, Fragmentable {
  id: () => Promise<ID_Output>;
  campaign: <T = CampaignPromise>() => T;
  story: <T = FragmentableArray<Decision>>(
    args?: {
      where?: DecisionWhereInput;
      orderBy?: DecisionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ScriptSubscription
  extends Promise<AsyncIterator<Script>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  campaign: <T = CampaignSubscription>() => T;
  story: <T = Promise<AsyncIterator<DecisionSubscription>>>(
    args?: {
      where?: DecisionWhereInput;
      orderBy?: DecisionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface LinkEdge {
  node: Link;
  cursor: String;
}

export interface LinkEdgePromise extends Promise<LinkEdge>, Fragmentable {
  node: <T = LinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LinkEdgeSubscription
  extends Promise<AsyncIterator<LinkEdge>>,
    Fragmentable {
  node: <T = LinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LinkSubscriptionPayload {
  mutation: MutationType;
  node: Link;
  updatedFields: String[];
  previousValues: LinkPreviousValues;
}

export interface LinkSubscriptionPayloadPromise
  extends Promise<LinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LinkPreviousValuesPromise>() => T;
}

export interface LinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LinkPreviousValuesSubscription>() => T;
}

export interface Link {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  url: String;
}

export interface LinkPromise extends Promise<Link>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
}

export interface LinkSubscription
  extends Promise<AsyncIterator<Link>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  postedBy: <T = UserSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface QuestionPreviousValues {
  id: ID_Output;
  value: String;
}

export interface QuestionPreviousValuesPromise
  extends Promise<QuestionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
}

export interface QuestionPreviousValuesSubscription
  extends Promise<AsyncIterator<QuestionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
}

export interface QuestionSubscriptionPayload {
  mutation: MutationType;
  node: Question;
  updatedFields: String[];
  previousValues: QuestionPreviousValues;
}

export interface QuestionSubscriptionPayloadPromise
  extends Promise<QuestionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QuestionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuestionPreviousValuesPromise>() => T;
}

export interface QuestionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuestionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuestionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuestionPreviousValuesSubscription>() => T;
}

export interface Campaign {
  id: ID_Output;
  name: String;
  code: String;
}

export interface CampaignPromise extends Promise<Campaign>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  code: () => Promise<String>;
  script: <T = ScriptPromise>() => T;
}

export interface CampaignSubscription
  extends Promise<AsyncIterator<Campaign>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  script: <T = ScriptSubscription>() => T;
}

export interface LinkPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  url: String;
}

export interface LinkPreviousValuesPromise
  extends Promise<LinkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
}

export interface LinkPreviousValuesSubscription
  extends Promise<AsyncIterator<LinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface ScriptConnection {
  pageInfo: PageInfo;
  edges: ScriptEdge[];
}

export interface ScriptConnectionPromise
  extends Promise<ScriptConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ScriptEdge>>() => T;
  aggregate: <T = AggregateScriptPromise>() => T;
}

export interface ScriptConnectionSubscription
  extends Promise<AsyncIterator<ScriptConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ScriptEdgeSubscription>>>() => T;
  aggregate: <T = AggregateScriptSubscription>() => T;
}

export interface DecisionEdge {
  node: Decision;
  cursor: String;
}

export interface DecisionEdgePromise
  extends Promise<DecisionEdge>,
    Fragmentable {
  node: <T = DecisionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DecisionEdgeSubscription
  extends Promise<AsyncIterator<DecisionEdge>>,
    Fragmentable {
  node: <T = DecisionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  links: <T = FragmentableArray<Link>>(
    args?: {
      where?: LinkWhereInput;
      orderBy?: LinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  links: <T = Promise<AsyncIterator<LinkSubscription>>>(
    args?: {
      where?: LinkWhereInput;
      orderBy?: LinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface QuestionConnection {
  pageInfo: PageInfo;
  edges: QuestionEdge[];
}

export interface QuestionConnectionPromise
  extends Promise<QuestionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QuestionEdge>>() => T;
  aggregate: <T = AggregateQuestionPromise>() => T;
}

export interface QuestionConnectionSubscription
  extends Promise<AsyncIterator<QuestionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuestionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuestionSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Link",
    embedded: false
  },
  {
    name: "Campaign",
    embedded: false
  },
  {
    name: "Script",
    embedded: false
  },
  {
    name: "Decision",
    embedded: false
  },
  {
    name: "Question",
    embedded: false
  },
  {
    name: "Answer",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
